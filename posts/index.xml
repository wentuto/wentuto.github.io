<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Things always happen gradually</title>
    <link>https://wentuto.github.io/posts/</link>
    <description>Recent content in Posts on Things always happen gradually</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Dec 2023 15:40:42 +0800</lastBuildDate><atom:link href="https://wentuto.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Attention Is All You Need</title>
      <link>https://wentuto.github.io/attention-is-all-you-need/</link>
      <pubDate>Tue, 12 Dec 2023 15:40:42 +0800</pubDate>
      
      <guid>https://wentuto.github.io/attention-is-all-you-need/</guid>
      <description>Attention is all you need 是一篇 Google 在 2017 年提出的論文，主要提出了名為 transformer 的 model。在這個 model 中，使用了 attention layer，提供了 NLP 模型平行處理機制，解決 Recurrent Models 以 batch 訓練時所遇到的記憶體限制問題。也讓 NLP model 有機會考量到當句子很長時，距離不同長度的資訊，這篇論文言簡意賅，重點都有提到，也提供了詳盡的 reference，再加上網路上已經有很多參考的影片和文章，甚至有程式碼可供練習，是一篇值得細細品味的論文，也是一個進入 NLP 很好的切入點。
Transformer 整篇論文，可以用這張圖說完。但每一個小部分都可以細細地去研究，去了解它的資訊如何流動。首先它是一個 Sequence to Sequence model：整體來看，可以分為左邊的 Encoder 和右邊的 Decoder 部分， 而這個 model 有 N 層，default N=6，也就是左邊有 6 層，右邊也有 6 層，假設 N=2 的話，則如下圖：
我們可以看出 Encoder 的 output 會輸入到 Decoder，而 Decoder 會依序 output 出一個個 token，就像 Sequence to Sequence models 一樣，而進入 Decoder 後，information 會流向Decoder 的每一層 Sub-layers，而不是 Output 到 Decoder 的第一層而已。</description>
    </item>
    
    <item>
      <title>用 GITHUB PAGES &#43; HUGO 打造我自己的BLOG</title>
      <link>https://wentuto.github.io/build-my-won-blog-with-github-pages-and-hugo/</link>
      <pubDate>Wed, 06 Dec 2023 14:49:03 +0800</pubDate>
      
      <guid>https://wentuto.github.io/build-my-won-blog-with-github-pages-and-hugo/</guid>
      <description>前言（為何使用 GITHUB PAGES) 之前已經使用過 GHOST 寫自己的BLOG，它是一套非常好用的 open source blog，功能相當強大，有很好用的編輯介面與擴充功能，但也因功能強大，管理邏輯上較複雜，遇到問題要克服也較麻煩，常擔心升級失敗後，之前的心血就白費了。我自己則是在更新 HTTPS 的 SSL (Let’s Encrypt)遇到問題後，就沒有再繼續更新自己舊的 GHOST BLOG。另一個原因是使用 GHOST 會有一筆 hosting 的費用（自己 host 網站或者是購買 GHOST 的 services），當知道可以用 GITHUB PAGES 來 publish 自己的靜態網頁，就想要試試看這個免費的方式。
評估（決定使用 HUGO 當靜態網頁生成器） 若要使用 GITHUB PAGES publish 網頁，需要先決定靜態網頁生成器的方案，它的作用是將你寫的 markdown 文章轉成網頁，你就可以將轉好的文章網頁上傳到 GITHUB PAGES 上去發表。靜態網頁生成器的方案有像 jekyll, hexo, and hugo。 比較後決定使用 HUGO，主要是『快』：因為 HUGO 是目前調查的靜態網頁系統中生成速度最快的，可以節省不少生成的時間。而 HUGO + GITHUB PAGES 這樣的方式比起之前 GHOST 的方案來說相依的模組較少，執行起來相對『簡單』很多，想說等之後真的越寫越多，再搬到 GHOST 也不是不可以 XD。
安裝 首先是在電腦上安裝 HUGO 這個用 Go 編寫的靜態網站生成器，由於我用的電腦是 MACBOOK，所以使用下面 command</description>
    </item>
    
  </channel>
</rss>
